#!/bin/bash

if [ $# -lt 4 ]; then
  echo ""
  echo "        Usage: $0 [APP_NAME] [APP_CORE_TARGET] [VERIFY_CNT] [BUILD] [PAGE_SIZE]"
  echo ""
  exit 1
fi

APP=$1
AFFINITY=$2
VERIFY_CNT=$3
BUILD=$4
if [ -z "$5" ]; then
  WKSP_PAGE_SZ=""
  shift 4
else
  WKSP_PAGE_SZ=$5
  shift 5
fi
  
#######################################################################

CONF=tmp/$APP.cfg

WKSP=$APP.wksp
WKSP_PERM=0600

POD_SZ=16384

CNC_APP_SZ=4032

VERIFY_DEPTH=8192
VERIFY_MTU=1542   # FIXME: recalibrate (probably smaller for today, larger for later)

DEDUP_TCACHE_DEPTH=4194302
DEDUP_TCACHE_MAP_CNT=0
DEDUP_DEPTH=$VERIFY_DEPTH

# Set a sensible default for page size depending on OS and architecture platform in use;
# Linux x64: gigantic
# macOS x64 Intel: huge (superpages)
# macOS ARM (M1/M2): normal
OS_STR=`uname -s`
ARCH_STR=`uname -m`
if [[ "$OS_STR" == "Linux" ]] && [[ "$ARCH_STR" == "x86_64" ]]; then
  PLATFORM_DEFAULT_WKSP_PAGE_SZ=gigantic
elif [[ "$OS_STR" == "Darwin" ]] && [[ "$ARCH_STR" == "x86_64" ]]; then
  VERSION_LEVEL_STR=`uname -v`
  if [[ "$VERSION_LEVEL_STR" == *"ARM64"* ]]; then
    PLATFORM_DEFAULT_WKSP_PAGE_SZ=normal
  else
    PLATFORM_DEFAULT_WKSP_PAGE_SZ=huge
  fi
elif [[ "$OS_STR" == "Darwin" ]] && [[ "$ARCH_STR" == "arm64" ]]; then
  echo "Run firedancer under Rosetta on macOS M1 and M2 systems"
  exit 1
else
  echo "Firedancer is not supported on this platform"
  exit 1
fi

# Allow override of platform's default page size via a command line argument
# If PAGE_SIZE argument was not provided at the command line, use the platform's default,
# as determined above.
if [[ -z "$WKSP_PAGE_SZ" ]]; then
  WKSP_PAGE_SZ=$PLATFORM_DEFAULT_WKSP_PAGE_SZ
fi

if [ "$WKSP_PAGE_SZ" != "huge" ] && [ "$WKSP_PAGE_SZ" != "gigantic" ] && [ "$WKSP_PAGE_SZ" != "normal" ]; then
  echo "fd_frank_init fail, invalid page size '$WKSP_PAGE_SZ' specified"
  exit 1
fi

if [[ "$WKSP_PAGE_SZ" == "gigantic" ]]; then
  WKSP_PAGE_CNT=2
elif [[ "$WKSP_PAGE_SZ" == "huge" ]]; then
  WKSP_PAGE_CNT=1024
elif [[ "$WKSP_PAGE_SZ" == "normal" ]]; then
  WKSP_PAGE_CNT=524288
fi    

#######################################################################

FD_LOG_PATH=""
export FD_LOG_PATH

$BUILD/bin/fd_wksp_ctl delete $WKSP # Okay if fails ... might not exist already
$BUILD/bin/fd_wksp_ctl new $WKSP $WKSP_PAGE_CNT $WKSP_PAGE_SZ $AFFINITY $WKSP_PERM || exit $?

POD=`$BUILD/bin/fd_pod_ctl new $WKSP $POD_SZ` || exit $?

MAIN_CNC=`$BUILD/bin/fd_tango_ctl new-cnc $WKSP 0 tic $CNC_APP_SZ` || exit $?
$BUILD/bin/fd_pod_ctl                      \
  insert $POD cstr $APP.main.cnc $MAIN_CNC \
  || exit $?

CNC=`$BUILD/bin/fd_tango_ctl new-cnc $WKSP 0 tic $CNC_APP_SZ` || exit $?
$BUILD/bin/fd_pod_ctl                 \
  insert $POD cstr $APP.pack.cnc $CNC \
  || exit $?

CNC=`$BUILD/bin/fd_tango_ctl new-cnc $WKSP 1 tic $CNC_APP_SZ` || exit $?
TCACHE=`$BUILD/bin/fd_tango_ctl new-tcache $WKSP $DEDUP_TCACHE_DEPTH $DEDUP_TCACHE_MAP_CNT` || exit $?
MCACHE=`$BUILD/bin/fd_tango_ctl new-mcache $WKSP $DEDUP_DEPTH 0 0` || exit $?
FSEQ=`$BUILD/bin/fd_tango_ctl new-fseq $WKSP 0` || exit $?
# Use defaults for cr_max, lazy, seed
$BUILD/bin/fd_pod_ctl                        \
  insert $POD cstr $APP.dedup.cnc    $CNC    \
  insert $POD cstr $APP.dedup.tcache $TCACHE \
  insert $POD cstr $APP.dedup.mcache $MCACHE \
  insert $POD cstr $APP.dedup.fseq   $FSEQ   \
  || exit $?

for((verify_idx=0;verify_idx<VERIFY_CNT;verify_idx++)); do
  CNC=`$BUILD/bin/fd_tango_ctl new-cnc $WKSP 2 tic $CNC_APP_SZ` || exit $?
  MCACHE=`$BUILD/bin/fd_tango_ctl new-mcache $WKSP $VERIFY_DEPTH 0 0` || exit $?
  DCACHE=`$BUILD/bin/fd_tango_ctl new-dcache $WKSP $VERIFY_MTU $VERIFY_DEPTH 1 1 0` || exit $?
  FSEQ=`$BUILD/bin/fd_tango_ctl new-fseq $WKSP 0` || exit $?
  $BUILD/bin/fd_pod_ctl                                      \
    insert $POD cstr $APP.verify.v$verify_idx.cnc    $CNC    \
    insert $POD cstr $APP.verify.v$verify_idx.mcache $MCACHE \
    insert $POD cstr $APP.verify.v$verify_idx.dcache $DCACHE \
    insert $POD cstr $APP.verify.v$verify_idx.fseq   $FSEQ   \
    || exit $?
done

BASE_ARGS="--pod $POD --cfg $APP"
RUN_ARGS="$BASE_ARGS --log-app $APP --log-thread main"
MON_ARGS="$BASE_ARGS --log-app $APP --log-thread mon"

#######################################################################

mkdir -pv `dirname $CONF` || exit $?
echo "#!/bin/bash"             >  $CONF
echo "# AUTOGENERATED"         >> $CONF
echo "BUILD=$BUILD"            >> $CONF
echo "WKSP=$WKSP"              >> $CONF
echo "AFFINITY=$AFFINITY"      >> $CONF
echo "APP=$APP"                >> $CONF
echo "POD=$POD"                >> $CONF
echo "RUN_ARGS=\"$RUN_ARGS\""  >> $CONF
echo "MON_ARGS=\"$MON_ARGS\""  >> $CONF
echo "MAIN_CNC=$MAIN_CNC"      >> $CONF

#######################################################################

echo Autogenerated configuration at $CONF
echo ""
cat $CONF
echo ""

echo Configuration details
echo ""
$BUILD/bin/fd_pod_ctl list $POD 2> /dev/null || exit $?
echo ""

echo success
exit 0
